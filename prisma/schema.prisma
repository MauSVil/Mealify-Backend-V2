generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admins {
  id                  Int           @id @default(autoincrement())
  name                String?       @db.VarChar(100)
  email               String        @unique @db.VarChar(150)
  clerk_user_id       String        @unique @db.VarChar(255)
  created_at          DateTime?     @default(now()) @db.Timestamp(6)
  updated_at          DateTime?     @default(now()) @db.Timestamp(6)
  stripe_account      String?       @unique @db.VarChar(255)
  first_last_name     String?       @db.VarChar(100)
  second_last_name    String?       @db.VarChar(100)
  phone               String?       @db.VarChar(10)
  onboarding_finished Boolean?      @default(false)
  stripe_status       StripeStatus  @default(error)
  restaurants         restaurants[]
}

model delivery_drivers {
  id            Int       @id @default(autoincrement())
  name          String    @db.VarChar(100)
  phone         String    @db.VarChar(15)
  email         String    @unique @db.VarChar(150)
  clerk_user_id String    @unique @db.VarChar(255)
  vehicle_type  String?   @db.VarChar(50)
  license_plate String?   @db.VarChar(20)
  is_active     Boolean   @default(true)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @db.Timestamp(6)
  latitude      Decimal?  @db.Decimal(9, 6)
  longitude     Decimal?  @db.Decimal(9, 6)
  orders        orders[]
}

model products {
  id            Int           @id @default(autoincrement())
  restaurant_id Int
  name          String        @db.VarChar(100)
  description   String
  price         Decimal       @db.Decimal(10, 2)
  is_available  Boolean       @default(true)
  created_at    DateTime?     @default(now()) @db.Timestamp(6)
  updated_at    DateTime?     @default(now()) @db.Timestamp(6)
  image_max     String?       @db.VarChar(255)
  image_med     String?       @db.VarChar(255)
  image_min     String?       @db.VarChar(255)
  order_items   order_items[]
  restaurants   restaurants   @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model restaurants {
  id             Int        @id @default(autoincrement())
  admin_id       Int?
  name           String     @db.VarChar(100)
  address        String     @db.VarChar(255)
  phone          String?    @db.VarChar(15)
  latitude       Decimal    @db.Decimal(9, 6)
  longitude      Decimal    @db.Decimal(9, 6)
  category       String     @db.VarChar(100)
  hero_image_min String?    @db.VarChar(255)
  hero_image_med String?    @db.VarChar(255)
  hero_image_max String?    @db.VarChar(255)
  created_at     DateTime?  @default(now()) @db.Timestamp(6)
  updated_at     DateTime?  @default(now()) @db.Timestamp(6)
  delivery_fee   Decimal    @db.Decimal
  orders         orders[]
  products       products[]
  admins         admins?    @relation(fields: [admin_id], references: [id], onUpdate: NoAction)
}

model user_addresses {
  id           Int       @id @default(autoincrement())
  user_id      Int?
  address_line String    @db.VarChar(255)
  latitude     Decimal?  @db.Decimal(9, 6)
  longitude    Decimal?  @db.Decimal(9, 6)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  users        users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model users {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(100)
  email          String           @unique @db.VarChar(150)
  clerk_user_id  String           @unique @db.VarChar(255)
  phone          String?          @db.VarChar(15)
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  updated_at     DateTime?        @default(now()) @db.Timestamp(6)
  orders         orders[]
  user_addresses user_addresses[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model order_items {
  id         Int       @id @default(autoincrement())
  order_id   Int?
  product_id Int?
  quantity   Int
  unit_price Decimal   @db.Decimal(10, 2)
  orders     orders?   @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products   products? @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model orders {
  id                  Int               @id @default(autoincrement())
  user_id             Int
  restaurant_id       Int
  driver_id           Int?
  status              OrderStatus       @default(pending)
  total_price         Decimal           @db.Decimal(10, 2)
  delivery_fee        Decimal           @db.Decimal(10, 2)
  created_at          DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?         @default(now()) @db.Timestamptz(6)
  payment_intent_id   String            @db.VarChar(255)
  payment_status      PaymentStatus     @default(pending)
  latitude            Decimal           @db.Decimal(10, 8)
  longitude           Decimal           @db.Decimal(10, 8)
  plaform_fee_amount  Decimal           @db.Decimal(10, 2)
  delivery_ptg_amount Decimal           @db.Decimal(10, 2)
  amount              Decimal           @default(0) @db.Decimal(10, 2)
  order_items         order_items[]
  delivery_drivers    delivery_drivers? @relation(fields: [driver_id], references: [id], onUpdate: NoAction)
  restaurants         restaurants       @relation(fields: [restaurant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users               users             @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum OrderStatus {
  pending
  in_progress
  delivered
  cancelled
  preparing
  ready_for_pickup
}

enum PaymentStatus {
  pending
  completed
  failed
  rejected
}

enum StripeStatus {
  error
  success
}
